version: '3.8'
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES__USER}
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD}
      POSTGRES_DB: ${POSTGRES__DB}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
    networks:
      - cti_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES__USER} -d ${POSTGRES__DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTICSEARCH__PASSWORD}
      - xpack.security.enabled=false
      - search.max_async_search_response_size=200mb
    ports:
      - "9200:9200"
    volumes:
      - ./data/es_data:/usr/share/elasticsearch/data
    networks:
      - cti_network
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  kafka:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - cti_network

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - cti_network

  # samba:
  #   image: dperson/samba
  #   container_name: samba-server
  #   ports:
  #     - "139:139"
  #     - "445:445"
  #   volumes:
  #     - ./data/samba_share:/mount
  #   environment:
  #     - USERID=${SAMBA_USERID}
  #     - GROUPID=${SAMBA_GROUPID}
  #     - SAMBA_USER=${UPSTREAM_SMB__USERNAME}
  #     - SAMBA_PASSWORD=${UPSTREAM_SMB__PASSWORD}
  #   command: >
  #     -u "${UPSTREAM_SMB__USERNAME};${UPSTREAM_SMB__PASSWORD}"
  #     -s "share;/mount;yes;no;yes;all;none;0777"
  #     -g "server min protocol = SMB2"
  #   networks:
  #     - cti_network

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO__ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO__SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - '9000:9000'
      - '9001:9001'
    command: server /data --console-address ":9001"
    networks:
      cti_network:
        aliases:
          - minio

  minio_setup:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      while ! mc alias set myminio http://minio:9000 ${MINIO__ACCESS_KEY} ${MINIO__SECRET_KEY}; do
        echo 'Waiting for MinIO...';
        sleep 5;
      done;
      mc mb myminio/${MINIO__BUCKET_NAME} || true;
      mc anonymous set public myminio/${MINIO__BUCKET_NAME}
      "
    environment:
      MINIO_ACCESS_KEY: ${MINIO__ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO__SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO__BUCKET_NAME}
    networks:
      - cti_network

volumes:
  postgres_data:
  es_data:
  samba_share:
  minio_data:

networks:
  cti_network:
